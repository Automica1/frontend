// app/components/Service_Slug/ServicesSidebar.tsx
import React from 'react';
import { 
  QrCode, 
  FileText, 
  Scan, 
  Search,
  Shield,
  ChevronRight,
  X,
  ChevronLeft,
  Menu,
  PenTool
} from 'lucide-react';

interface Service {
  title: string;
  slug: string;
  gradient: string;
  icon: React.ComponentType<any>;
}

interface ServicesSidebarProps {
  services: Service[];
  currentService: string;
  onServiceChange: (slug: string) => void;
  isOpen: boolean;
  onClose: () => void;
  gradient: string;
  isMinimized: boolean;
  onToggleMinimize: () => void;
}

// Updated default services with new routes
const defaultServices: Service[] = [
  {
    title: 'QR Extract',
    slug: 'qr-extract',
    gradient: 'from-blue-500 to-purple-600',
    icon: QrCode,
  },
  {
    title: 'Signature Verification',
    slug: 'signature-verification',
    gradient: 'from-green-500 to-teal-600',
    icon: PenTool,
  },
  {
    title: 'ID Crop',
    slug: 'id-crop',
    gradient: 'from-orange-500 to-red-600',
    icon: FileText,
  },
  {
    title: 'QR Masking',
    slug: 'qr-masking',
    gradient: 'from-purple-500 to-pink-600',
    icon: QrCode,
  },
  {
    title: 'Face Verify',
    slug: 'face-verify',
    gradient: 'from-yellow-500 to-orange-600',
    icon: Shield,
  },
  {
    title: 'Face Cropping',
    slug: 'face-cropping',
    gradient: 'from-cyan-500 to-blue-600',
    icon: Scan,
  },
];

export default function ServicesSidebar({ 
  services = defaultServices, 
  currentService, 
  onServiceChange, 
  isOpen, 
  onClose,
  gradient,
  isMinimized,
  onToggleMinimize
}: ServicesSidebarProps) {
  const [isHovered, setIsHovered] = React.useState(false);
  const [isAutoMinimized, setIsAutoMinimized] = React.useState(true);

  // Determine if sidebar should be expanded (either manually expanded or hovered)
  const shouldExpand = !isMinimized || isHovered;

  return (
    <>
      {/* Backdrop */}
      {isOpen && (
        <div 
          className="fixed inset-0 bg-black/50 backdrop-blur-sm z-40 lg:hidden"
          onClick={onClose}
        />
      )}

      {/* Sidebar */}
      <div className={`fixed top-20 right-0 bottom-0 z-30 transform transition-transform duration-300 ease-in-out ${
        isOpen ? 'translate-x-0' : 'translate-x-full'
      } lg:translate-x-0`}>
        
        {/* Desktop Sidebar */}
        <div 
          className="hidden lg:block h-full"
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
        >
          <div className={`relative h-full transition-all duration-300 ${shouldExpand ? 'w-64' : 'w-16'}`}>
            {/* Border shape with gradient */}
            <div 
              className={`absolute inset-0 bg-gradient-to-b ${gradient} opacity-100 transition-all duration-300`}
              style={{
                clipPath: shouldExpand 
                  ? 'polygon(35px 0, 100% 0, 100% 100%, 0 100%, 0 35px)'
                  : 'polygon(15px 0, 100% 0, 100% 100%, 0 100%, 0 15px)'
              }}
            />
            
            {/* Background shape */}
            <div 
              className="absolute bg-black/40 backdrop-blur-xl transition-all duration-300"
              style={{
                top: '2px',
                left: '2px',
                right: '2px',
                bottom: '2px',
                clipPath: shouldExpand 
                  ? 'polygon(35px 0, 100% 0, 100% 100%, 0 100%, 0 35px)'
                  : 'polygon(15px 0, 100% 0, 100% 100%, 0 100%, 0 15px)'
              }}
            />
            
            {/* Content container */}
            <div className={`relative h-full transition-all duration-300 ${shouldExpand ? 'p-4 pt-6' : 'p-2 pt-6'}`}>
              <div className="flex flex-col h-full">
                {/* Header with toggle button */}
                <div className="mb-6 relative">
                  {shouldExpand && (
                    <>
                      <h3 className="text-base font-semibold text-white mb-2">Services</h3>
                      <div className={`w-8 h-0.5 bg-gradient-to-r ${gradient} rounded-full`}></div>
                    </>
                  )}
                  
                  {/* Manual Toggle Button - Only show when expanded */}
                  {shouldExpand && (
                    <button
                      onClick={onToggleMinimize}
                      className="absolute top-0 right-0 p-1.5 rounded-md bg-white/10 hover:bg-white/20 transition-all duration-300 group"
                    >
                      <ChevronLeft className="w-3.5 h-3.5 text-white group-hover:scale-110 transition-transform duration-200" />
                    </button>
                  )}
                </div>
                
                {/* Services List - Fixed scrollbar by removing scrollbar-hide and adding proper styling */}
                <div className="flex-1 space-y-2 overflow-y-auto" style={{ 
                  scrollbarWidth: 'none', 
                  msOverflowStyle: 'none' 
                }}>
                  <style jsx>{`
                    div::-webkit-scrollbar {
                      display: none;
                    }
                  `}</style>
                  {services.map((service) => {
                    const Icon = service.icon;
                    const isActive = currentService === service.slug;
                    
                    return (
                      <div key={service.slug} className="relative group">
                        <button
                          onClick={() => onServiceChange(service.slug)}
                          className={`relative w-full flex items-center transition-all duration-300 ${
                            shouldExpand 
                              ? 'space-x-2 p-3 rounded-lg' 
                              : 'p-1.5 rounded-md justify-center'
                          } font-medium text-xs ${
                            isActive
                              ? 'text-white shadow-lg bg-white/5'
                              : 'text-gray-400 hover:text-white hover:bg-white/5'
                          }`}
                        >
                          {/* Service gradient indicator */}
                          <div className={`bg-gradient-to-b ${service.gradient} rounded-full flex-shrink-0 ${
                            shouldExpand ? 'w-0.5 h-6' : 'w-0.5 h-4 absolute left-0 top-1/2 transform -translate-y-1/2'
                          } ${
                            isActive ? 'opacity-100' : 'opacity-40 group-hover:opacity-60'
                          } transition-all duration-300`}></div>
                          
                          {/* Icon with service gradient */}
                          <div className={`rounded-md bg-gradient-to-br ${service.gradient} ${
                            shouldExpand ? 'p-1.5 ml-2' : 'p-1'
                          } ${
                            isActive ? 'opacity-100' : 'opacity-60 group-hover:opacity-80'
                          } transition-all duration-300`}>
                            <Icon className={`text-white ${shouldExpand ? 'w-3.5 h-3.5' : 'w-3 h-3'}`} />
                          </div>
                          
                          {/* Service title - show when expanded */}
                          {shouldExpand && (
                            <>
                              <span className="flex-1 text-left text-xs">{service.title}</span>
                              
                              {/* Arrow indicator */}
                              <ChevronRight className={`w-3 h-3 transition-all duration-300 ${
                                isActive 
                                  ? 'text-white transform translate-x-0.5' 
                                  : 'text-gray-600 group-hover:text-gray-400'
                              }`} />
                            </>
                          )}
                          
                          {/* Active state glow */}
                          {isActive && (
                            <div className={`absolute inset-0 bg-gradient-to-r ${service.gradient} opacity-5 rounded-lg blur-sm -z-10`}></div>
                          )}
                        </button>

                        {/* Tooltip for minimized state */}
                        {!shouldExpand && (
                          <div className="absolute left-full ml-2 top-1/2 transform -translate-y-1/2 opacity-0 group-hover:opacity-100 transition-opacity duration-200 pointer-events-none z-10">
                            <div className="bg-gray-900 text-white text-xs px-2 py-1 rounded-md whitespace-nowrap shadow-lg">
                              {service.title}
                              <div className="absolute left-0 top-1/2 transform -translate-x-1 -translate-y-1/2 w-2 h-2 bg-gray-900 rotate-45"></div>
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Mobile Sidebar */}
        <div className="lg:hidden h-full w-64 max-w-[85vw]">
          <div className="relative h-full">
            {/* Mobile background with gradient border */}
            <div className={`absolute inset-0 bg-gradient-to-b ${gradient} opacity-100 rounded-l-2xl`} />
            
            {/* Mobile inner background */}
            <div className="absolute bg-black/40 backdrop-blur-xl rounded-l-2xl" style={{
              top: '1px',
              left: '1px',
              right: '1px',
              bottom: '1px'
            }} />
            
            {/* Mobile content */}
            <div className="relative h-full p-4 pt-4">
              <div className="flex flex-col h-full">
                {/* Mobile Header with close button */}
                <div className="flex items-center justify-between mb-6">
                  <div>
                    <h3 className="text-lg font-semibold text-white">Services</h3>
                    <div className={`w-8 h-0.5 bg-gradient-to-r ${gradient} rounded-full mt-1`}></div>
                  </div>
                  <button
                    onClick={onClose}
                    className="p-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors duration-200"
                  >
                    <X className="w-5 h-5 text-white" />
                  </button>
                </div>
                
                {/* Mobile Services List - Fixed scrollbar */}
                <div className="flex-1 space-y-2 overflow-y-auto" style={{ 
                  scrollbarWidth: 'none', 
                  msOverflowStyle: 'none' 
                }}>
                  <style jsx>{`
                    div::-webkit-scrollbar {
                      display: none;
                    }
                  `}</style>
                  {services.map((service) => {
                    const Icon = service.icon;
                    const isActive = currentService === service.slug;
                    
                    return (
                      <button
                        key={service.slug}
                        onClick={() => {
                          onServiceChange(service.slug);
                          onClose();
                        }}
                        className={`group relative w-full flex items-center space-x-3 p-3 rounded-xl font-medium text-sm transition-all duration-300 ${
                          isActive
                            ? 'text-white shadow-lg bg-white/5'
                            : 'text-gray-400 hover:text-white hover:bg-white/5'
                        }`}
                      >
                        {/* Mobile service indicator */}
                        <div className={`w-0.5 h-6 bg-gradient-to-b ${service.gradient} rounded-full flex-shrink-0 ${
                          isActive ? 'opacity-100' : 'opacity-40 group-hover:opacity-60'
                        } transition-opacity duration-300`}></div>
                        
                        {/* Mobile icon */}
                        <div className={`p-1.5 rounded-lg bg-gradient-to-br ${service.gradient} ${
                          isActive ? 'opacity-100' : 'opacity-60 group-hover:opacity-80'
                        } transition-opacity duration-300`}>
                          <Icon className="w-3.5 h-3.5 text-white" />
                        </div>
                        
                        {/* Mobile service title */}
                        <span className="flex-1 text-left text-xs">{service.title}</span>
                        
                        {/* Mobile arrow */}
                        <ChevronRight className={`w-3.5 h-3.5 transition-all duration-300 ${
                          isActive 
                            ? 'text-white transform translate-x-0.5' 
                            : 'text-gray-600 group-hover:text-gray-400'
                        }`} />
                      </button>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}