'use client';
import React, { useRef, useMemo, useEffect, useState } from 'react';
import { Canvas, useFrame, useThree } from '@react-three/fiber';
import { OrbitControls, Sphere, Trail } from '@react-three/drei';
import * as THREE from 'three';

// Custom shader material for premium effects
const createAtomShader = () => {
  return new THREE.ShaderMaterial({
    uniforms: {
      time: { value: 0 },
      color: { value: new THREE.Color('#a855f7') },
      intensity: { value: 1.0 },
      glowPower: { value: 2.0 }
    },
    vertexShader: `
      varying vec3 vNormal;
      varying vec3 vPosition;
      varying vec2 vUv;
      uniform float time;
      
      // Simple noise function
      float noise(vec3 p) {
        return sin(p.x * 10.0) * sin(p.y * 10.0) * sin(p.z * 10.0) * 0.1;
      }
      
      void main() {
        vUv = uv;
        vNormal = normalize(normalMatrix * normal);
        
        vec3 pos = position;
        float n = noise(pos + time * 0.5) * 0.1;
        pos += normal * n;
        
        vec4 mvPosition = modelViewMatrix * vec4(pos, 1.0);
        vPosition = mvPosition.xyz;
        gl_Position = projectionMatrix * mvPosition;
      }
    `,
    fragmentShader: `
      uniform float time;
      uniform vec3 color;
      uniform float intensity;
      uniform float glowPower;
      varying vec3 vNormal;
      varying vec3 vPosition;
      varying vec2 vUv;
      
      void main() {
        vec3 viewDirection = normalize(cameraPosition - vPosition);
        float fresnel = 1.0 - dot(viewDirection, vNormal);
        fresnel = pow(fresnel, glowPower);
        
        float pulse = sin(time * 3.0) * 0.2 + 0.8;
        vec3 glowColor = color * intensity * pulse;
        
        float rim = fresnel * intensity;
        vec3 finalColor = mix(glowColor * 0.4, glowColor, rim);
        
        float alpha = fresnel * 0.9 + 0.1;
        gl_FragColor = vec4(finalColor, alpha);
      }
    `,
    transparent: true,
    side: THREE.DoubleSide,
    blending: THREE.AdditiveBlending
  });
};

// Premium Electron with advanced effects
function PremiumElectron({ radius, speed, offset, color = '#a855f7', trail = true }) {
  const electronRef = useRef();
  const glowRef = useRef();
  const [hovered, setHovered] = useState(false);
  
  const shaderMaterial = useMemo(() => createAtomShader(), []);

  useFrame((state) => {
    const time = state.clock.elapsedTime * speed + offset;
    if (electronRef.current) {
      // Complex orbital motion with multiple harmonics
      const x = Math.cos(time) * radius + Math.cos(time * 2.1) * 0.1;
      const z = Math.sin(time) * radius + Math.sin(time * 1.7) * 0.1;
      const y = Math.sin(time * 1.5) * 0.4 + Math.cos(time * 0.7) * 0.2;
      
      electronRef.current.position.set(x, y, z);
      electronRef.current.rotation.y = time * 2;
      electronRef.current.rotation.x = time * 1.3;
      
      // Update shader uniforms
      shaderMaterial.uniforms.time.value = state.clock.elapsedTime;
      shaderMaterial.uniforms.intensity.value = hovered ? 2.5 : 1.5;
      shaderMaterial.uniforms.color.value.setHex(hovered ? 0xc084fc : parseInt(color.replace('#', '0x')));
    }
    
    if (glowRef.current) {
      const scale = 1 + Math.sin(state.clock.elapsedTime * 4) * 0.3;
      glowRef.current.scale.setScalar(scale * (hovered ? 1.5 : 1));
    }
  });

  const ElectronComponent = () => (
    <group
      ref={electronRef}
      onPointerEnter={() => setHovered(true)}
      onPointerLeave={() => setHovered(false)}
      scale={hovered ? 1.3 : 1}
    >
      {/* Main electron with shader */}
      <mesh material={shaderMaterial}>
        <sphereGeometry args={[0.15, 32, 32]} />
      </mesh>
      
      {/* Multiple glow layers */}
      <mesh ref={glowRef} scale={2}>
        <sphereGeometry args={[0.15, 16, 16]} />
        <meshBasicMaterial
          color={color}
          transparent
          opacity={hovered ? 0.3 : 0.15}
          side={THREE.BackSide}
          blending={THREE.AdditiveBlending}
        />
      </mesh>
      
      <mesh scale={3}>
        <sphereGeometry args={[0.15, 8, 8]} />
        <meshBasicMaterial
          color={color}
          transparent
          opacity={0.05}
          side={THREE.BackSide}
          blending={THREE.AdditiveBlending}
        />
      </mesh>
      
      {/* Core light */}
      <pointLight color={color} intensity={hovered ? 3 : 1.5} distance={2} />
    </group>
  );

  return trail ? (
    <Trail
      width={hovered ? 1.5 : 0.8}
      length={15}
      color={color}
      attenuation={(t) => t * t * t}
    >
      <ElectronComponent />
    </Trail>
  ) : (
    <ElectronComponent />
  );
}

// Premium Orbital Ring
function PremiumOrbitalRing({ radius, rotationSpeed = 0.005, opacity = 0.4, segments = 128, color = '#a855f7' }) {
  const ringRef = useRef();
  const particlesRef = useRef();
  
  // Create ring geometry
  const ringGeometry = useMemo(() => {
    const geometry = new THREE.RingGeometry(radius - 0.03, radius + 0.03, segments);
    return geometry;
  }, [radius, segments]);

  // Create ring particles
  const ringParticles = useMemo(() => {
    const particles = [];
    for (let i = 0; i < 24; i++) {
      const angle = (i / 24) * Math.PI * 2;
      particles.push({
        position: [
          Math.cos(angle) * radius,
          0,
          Math.sin(angle) * radius
        ],
        phase: i
      });
    }
    return particles;
  }, [radius]);

  useFrame((state) => {
    if (ringRef.current) {
      ringRef.current.rotation.x += rotationSpeed * 0.6;
      ringRef.current.rotation.y += rotationSpeed * 0.4;
      ringRef.current.rotation.z += rotationSpeed * 0.2;
    }
    
    if (particlesRef.current) {
      particlesRef.current.children.forEach((particle, i) => {
        const data = ringParticles[i];
        particle.material.opacity = 0.6 + Math.sin(state.clock.elapsedTime * 2 + data.phase) * 0.4;
        particle.scale.setScalar(0.5 + Math.sin(state.clock.elapsedTime * 3 + data.phase) * 0.3);
      });
    }
  });

  return (
    <group ref={ringRef}>
      {/* Main ring */}
      <mesh geometry={ringGeometry}>
        <meshBasicMaterial
          color={color}
          transparent
          opacity={opacity}
          side={THREE.DoubleSide}
          blending={THREE.AdditiveBlending}
        />
      </mesh>
      
      {/* Ring edge glow */}
      <mesh geometry={ringGeometry} scale={1.1}>
        <meshBasicMaterial
          color={color}
          transparent
          opacity={opacity * 0.3}
          side={THREE.DoubleSide}
          blending={THREE.AdditiveBlending}
        />
      </mesh>
      
      {/* Ring particles */}
      <group ref={particlesRef}>
        {ringParticles.map((particle, i) => (
          <mesh key={i} position={particle.position}>
            <sphereGeometry args={[0.02, 8, 8]} />
            <meshBasicMaterial
              color={color}
              transparent
              opacity={0.6}
              blending={THREE.AdditiveBlending}
            />
          </mesh>
        ))}
      </group>
    </group>
  );
}

// Premium Nucleus
function PremiumNucleus() {
  const nucleusRef = useRef();
  const innerCoreRef = useRef();
  const glowRef = useRef();
  const [hovered, setHovered] = useState(false);
  
  const nucleusShader = useMemo(() => {
    const shader = createAtomShader();
    shader.uniforms.color.value = new THREE.Color('#ffffff');
    shader.uniforms.intensity.value = 2.5;
    shader.uniforms.glowPower.value = 3.0;
    return shader;
  }, []);

  useFrame((state) => {
    if (nucleusRef.current) {
      nucleusRef.current.rotation.x += 0.02;
      nucleusRef.current.rotation.y += 0.025;
      nucleusRef.current.rotation.z += 0.015;
    }
    
    if (innerCoreRef.current) {
      innerCoreRef.current.rotation.x -= 0.015;
      innerCoreRef.current.rotation.y -= 0.02;
      innerCoreRef.current.rotation.z += 0.01;
    }
    
    if (glowRef.current) {
      const scale = 1 + Math.sin(state.clock.elapsedTime * 2) * 0.1;
      glowRef.current.scale.setScalar(scale * (hovered ? 1.3 : 1));
    }
    
    // Update shader
    nucleusShader.uniforms.time.value = state.clock.elapsedTime;
    nucleusShader.uniforms.intensity.value = hovered ? 3.5 : 2.5;
  });

  return (
    <group
      onPointerEnter={() => setHovered(true)}
      onPointerLeave={() => setHovered(false)}
    >
      {/* Main nucleus */}
      <mesh ref={nucleusRef} material={nucleusShader} scale={hovered ? 1.3 : 1}>
        <icosahedronGeometry args={[0.5, 2]} />
        <pointLight color="#a855f7" intensity={hovered ? 5 : 3} distance={12} />
      </mesh>
      
      {/* Inner rotating core */}
      <mesh ref={innerCoreRef} scale={0.7}>
        <octahedronGeometry args={[0.5, 1]} />
        <meshStandardMaterial
          color="#a855f7"
          transparent
          opacity={0.8}
          roughness={0}
          metalness={1}
          emissive="#581c87"
          emissiveIntensity={0.5}
        />
      </mesh>
      
      {/* Multiple glow layers */}
      <group ref={glowRef}>
        {[1.8, 2.5, 3.2].map((scale, i) => (
          <mesh key={i} scale={scale}>
            <sphereGeometry args={[0.5, 16, 16]} />
            <meshBasicMaterial
              color="#a855f7"
              transparent
              opacity={0.15 / (i + 1)}
              side={THREE.BackSide}
              blending={THREE.AdditiveBlending}
            />
          </mesh>
        ))}
      </group>
      
      {/* Nucleus energy particles */}
      <group>
        {Array.from({ length: 20 }, (_, i) => (
          <mesh
            key={i}
            position={[
              (Math.random() - 0.5) * 2,
              (Math.random() - 0.5) * 2,
              (Math.random() - 0.5) * 2
            ]}
          >
            <sphereGeometry args={[0.01, 6, 6]} />
            <meshBasicMaterial
              color="#c084fc"
              transparent
              opacity={0.8}
              blending={THREE.AdditiveBlending}
            />
          </mesh>
        ))}
      </group>
    </group>
  );
}

// Advanced Background
function PremiumBackground() {
  const particlesRef = useRef();
  const gridRef = useRef();
  
  const backgroundParticles = useMemo(() => {
    const temp = [];
    for (let i = 0; i < 300; i++) {
      temp.push({
        position: [
          (Math.random() - 0.5) * 50,
          (Math.random() - 0.5) * 50,
          (Math.random() - 0.5) * 50
        ],
        scale: Math.random() * 1.2 + 0.3,
        speed: Math.random() * 0.03 + 0.01,
        color: ['#a855f7', '#7c3aed', '#c084fc'][Math.floor(Math.random() * 3)]
      });
    }
    return temp;
  }, []);

  useFrame((state) => {
    if (particlesRef.current) {
      particlesRef.current.children.forEach((particle, i) => {
        const data = backgroundParticles[i];
        particle.position.y += Math.sin(state.clock.elapsedTime * data.speed + i) * 0.008;
        particle.position.x += Math.cos(state.clock.elapsedTime * data.speed * 0.5 + i) * 0.004;
        particle.material.opacity = 0.1 + Math.sin(state.clock.elapsedTime * 2 + i) * 0.1;
        particle.rotation.z += data.speed * 0.5;
      });
    }
    
    if (gridRef.current) {
      gridRef.current.rotation.y += 0.001;
      gridRef.current.material.opacity = 0.1 + Math.sin(state.clock.elapsedTime * 0.5) * 0.02;
    }
  });

  return (
    <>
      {/* Background particles */}
      <group ref={particlesRef}>
        {backgroundParticles.map((particle, i) => (
          <mesh key={i} position={particle.position} scale={particle.scale}>
            <sphereGeometry args={[0.015, 6, 6]} />
            <meshBasicMaterial
              color={particle.color}
              transparent
              opacity={0.2}
              blending={THREE.AdditiveBlending}
            />
          </mesh>
        ))}
      </group>
      
      {/* Distant grid sphere */}
      <mesh ref={gridRef} scale={25}>
        <sphereGeometry args={[1, 32, 32]} />
        <meshBasicMaterial
          color="#581c87"
          transparent
          opacity={0.08}
          side={THREE.BackSide}
          wireframe={true}
        />
      </mesh>
      
      {/* Atmospheric glow */}
      <mesh scale={30}>
        <sphereGeometry args={[1, 16, 16]} />
        <meshBasicMaterial
          color="#3b0764"
          transparent
          opacity={0.03}
          side={THREE.BackSide}
        />
      </mesh>
    </>
  );
}

// Advanced Camera System
function PremiumCameraController() {
  const { camera, mouse } = useThree();
  const targetRef = useRef({ x: 0, y: 0, z: 9 });
  
  useFrame((state) => {
    // Enhanced mouse parallax
    const mouseInfluence = 0.8;
    targetRef.current.x = mouse.x * mouseInfluence;
    targetRef.current.y = mouse.y * mouseInfluence * 0.5;
    
    // Smooth camera movement with easing
    camera.position.x += (targetRef.current.x - camera.position.x) * 0.08;
    camera.position.y += (targetRef.current.y - camera.position.y) * 0.08;
    
    // Dynamic breathing and floating motion
    const breathe = Math.sin(state.clock.elapsedTime * 0.6) * 0.2;
    const float = Math.cos(state.clock.elapsedTime * 0.4) * 0.1;
    camera.position.z = 9 + breathe;
    camera.position.y += float;
    
    // Subtle rotation for immersion
    camera.rotation.z = mouse.x * 0.02;
    
    camera.lookAt(0, 0, 0);
  });
  
  return null;
}

// Main Premium Atomic Structure
function PremiumAtomicStructure() {
  const groupRef = useRef();
  
  useFrame((state) => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.002;
      groupRef.current.rotation.x = Math.sin(state.clock.elapsedTime * 0.3) * 0.15;
      groupRef.current.rotation.z = Math.cos(state.clock.elapsedTime * 0.2) * 0.05;
    }
  });

  return (
    <group ref={groupRef}>
      {/* Central Nucleus */}
      <PremiumNucleus />
      
      {/* Orbital Rings - Multiple layers */}
      <PremiumOrbitalRing radius={2.2} rotationSpeed={0.008} opacity={0.7} segments={256} color="#a855f7" />
      
      <group rotation={[Math.PI / 2.2, 0, 0]}>
        <PremiumOrbitalRing radius={3.0} rotationSpeed={0.006} opacity={0.5} segments={192} color="#7c3aed" />
      </group>
      
      <group rotation={[0, Math.PI / 2.2, Math.PI / 3.5]}>
        <PremiumOrbitalRing radius={3.8} rotationSpeed={0.004} opacity={0.4} segments={128} color="#6b21a8" />
      </group>
      
      <group rotation={[Math.PI / 1.6, Math.PI / 3.5, 0]}>
        <PremiumOrbitalRing radius={4.6} rotationSpeed={0.003} opacity={0.25} segments={96} color="#c084fc" />
      </group>

      {/* Premium Electrons - Multiple orbital shells */}
      {/* First shell */}
      <PremiumElectron radius={2.2} speed={1.8} offset={0} color="#a855f7" />
      <PremiumElectron radius={2.2} speed={1.8} offset={Math.PI} color="#a855f7" />
      
      {/* Second shell */}
      <group rotation={[Math.PI / 2.2, 0, 0]}>
        <PremiumElectron radius={3.0} speed={1.3} offset={0} color="#7c3aed" />
        <PremiumElectron radius={3.0} speed={1.3} offset={Math.PI / 2} color="#7c3aed" />
        <PremiumElectron radius={3.0} speed={1.3} offset={Math.PI} color="#7c3aed" />
        <PremiumElectron radius={3.0} speed={1.3} offset={3 * Math.PI / 2} color="#7c3aed" />
      </group>
      
      {/* Third shell */}
      <group rotation={[0, Math.PI / 2.2, Math.PI / 3.5]}>
        <PremiumElectron radius={3.8} speed={0.9} offset={0} color="#6b21a8" />
        <PremiumElectron radius={3.8} speed={0.9} offset={2 * Math.PI / 3} color="#6b21a8" />
        <PremiumElectron radius={3.8} speed={0.9} offset={4 * Math.PI / 3} color="#6b21a8" />
      </group>
      
      {/* Outer shell */}
      <group rotation={[Math.PI / 1.6, Math.PI / 3.5, 0]}>
        <PremiumElectron radius={4.6} speed={0.7} offset={0} color="#c084fc" />
        <PremiumElectron radius={4.6} speed={0.7} offset={Math.PI / 2} color="#c084fc" />
        <PremiumElectron radius={4.6} speed={0.7} offset={Math.PI} color="#c084fc" />
        <PremiumElectron radius={4.6} speed={0.7} offset={3 * Math.PI / 2} color="#c084fc" />
      </group>
    </group>
  );
}

// Main Premium Component
export default function PremiumAtomicHero() {
  const [loading, setLoading] = useState(true);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  
  useEffect(() => {
    const timer = setTimeout(() => setLoading(false), 2500);
    
    const handleMouseMove = (e) => {
      setMousePosition({
        x: (e.clientX / window.innerWidth) * 2 - 1,
        y: -(e.clientY / window.innerHeight) * 2 + 1
      });
    };
    
    window.addEventListener('mousemove', handleMouseMove);
    
    return () => {
      clearTimeout(timer);
      window.removeEventListener('mousemove', handleMouseMove);
    };
  }, []);

  return (
    <div className="w-full h-screen relative overflow-hidden bg-gradient-to-br from-slate-950 via-purple-950 to-slate-950">
      {/* Loading Screen */}
      {loading && (
        <div className="absolute inset-0 bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 flex items-center justify-center z-50">
          <div className="text-center">
            <div className="relative">
              <div className="w-20 h-20 border-4 border-purple-400/30 border-t-purple-400 rounded-full animate-spin mx-auto mb-6"></div>
              <div className="absolute inset-0 w-20 h-20 border-4 border-purple-300/20 border-b-purple-300 rounded-full animate-spin mx-auto" style={{ animationDirection: 'reverse', animationDuration: '3s' }}></div>
            </div>
            <div className="space-y-2">
              <p className="text-purple-400 text-xl font-light tracking-wider">ATOMICA ENGINE</p>
              <p className="text-purple-300/60 text-sm font-thin">Initializing atomic structures...</p>
            </div>
          </div>
        </div>
      )}
      
      {/* Dynamic background effect */}
      <div 
        className="absolute inset-0 opacity-30"
        style={{
          background: `radial-gradient(circle at ${50 + mousePosition.x * 10}% ${50 + mousePosition.y * 10}%, rgba(168, 85, 247, 0.1) 0%, transparent 50%)`
        }}
      />
      
      {/* Main 3D Canvas */}
      <Canvas
        camera={{ position: [0, 0, 9], fov: 32 }}
        gl={{ 
          antialias: true, 
          alpha: true,
          powerPreference: "high-performance",
          stencil: false,
          depth: true,
          logarithmicDepthBuffer: true
        }}
        style={{ background: 'transparent' }}
        shadows="soft"
        dpr={[1, 2]}
      >
        {/* Advanced Lighting Setup */}
        <ambientLight intensity={0.15} color="#4c1d95" />
        <directionalLight 
          position={[15, 15, 8]} 
          intensity={0.6} 
          color="#ffffff"
          castShadow
          shadow-mapSize={[2048, 2048]}
          shadow-camera-far={50}
          shadow-camera-near={1}
        />
        <pointLight position={[0, 0, 0]} intensity={2.5} color="#a855f7" distance={15} />
        <spotLight
          position={[8, 8, 8]}
          angle={0.4}
          penumbra={1}
          intensity={1.2}
          color="#c084fc"
          distance={20}
        />
        <spotLight
          position={[-8, -8, 8]}
          angle={0.3}
          penumbra={0.8}
          intensity={0.8}
          color="#7c3aed"
          distance={15}
        />
        
        {/* Environment and Background */}
        <PremiumBackground />
        
        {/* Main Atomic Structure */}
        <PremiumAtomicStructure />
        
        {/* Camera Control */}
        <PremiumCameraController />
        
        {/* Advanced Controls */}
        <OrbitControls 
          enableZoom={false}
          enablePan={false}
          enableRotate={true}
          autoRotate={true}
          autoRotateSpeed={0.15}
          maxPolarAngle={Math.PI / 1.6}
          minPolarAngle={Math.PI / 2.4}
          dampingFactor={0.08}
          enableDamping={true}
          rotateSpeed={0.3}
        />
      </Canvas>
      
      {/* Premium UI Overlay */}
      <div className="absolute inset-0 pointer-events-none">
        <div className="flex items-center justify-center h-full">
          <div className="text-center text-white z-10 max-w-5xl mx-auto px-8">
            <div className="mb-8">
              <h1 className="text-8xl md:text-9xl font-thin mb-4 bg-gradient-to-r from-purple-300 via-purple-400 to-purple-500 bg-clip-text text-transparent leading-none tracking-tight">
                ATOMICA
              </h1>
              <h2 className="text-6xl md:text-7xl font-extralight text-white/90 tracking-widest">
                INTELLIGENCE
              </h2>
            </div>
            
            <div className="max-w-3xl mx-auto mb-12">
              <p className="text-xl md:text-2xl font-light text-white/70 leading-relaxed tracking-wide">
                Intelligent solutions for document AI and atomic-scale processing
              </p>
              <div className="w-24 h-0.5 bg-gradient-to-r from-transparent via-purple-400 to-transparent mx-auto mt-6"></div>
            </div>
            
            {/* Stats */}
            <div className="flex justify-center space-x-16 text-white/60 text-sm tracking-widest">
              <div className="text-center">
                <div className="text-4xl font-thin text-purple-400 mb-1">99.9%</div>
                <div className="text-xs uppercase tracking-widest">Accuracy</div>
              </div>
              <div className="text-center">
                <div className="text-4xl font-thin text-purple-400 mb-1">∞</div>
                <div className="text-xs uppercase tracking-widest">Possibilities</div>
              </div>
              <div className="text-center">
                <div className="text-4xl font-thin text-purple-400 mb-1">AI</div>
                <div className="text-xs uppercase tracking-widest">Powered</div>
              </div>
            </div>
          </div>
        </div>
        
        {/* Corner accents */}
        <div className="absolute top-8 right-8">
          <div className="w-32 h-32 border-t border-r border-purple-400/40 relative">
            <div className="absolute -top-2 -right-2 w-4 h-4 bg-purple-400/60 rotate-45"></div>
          </div>
        </div>
        <div className="absolute bottom-8 left-8">
          <div className="w-32 h-32 border-b border-l border-purple-400/40 relative">
            <div className="absolute -bottom-2 -left-2 w-4 h-4 bg-purple-400/60 rotate-45"></div>
          </div>
        </div>
        
        {/* Version indicator */}
        <div className="absolute bottom-8 right-8 text-purple-400/60 text-xs tracking-widest">
          ATOMICA ENGINE v2.0
        </div>
      </div>
    </div>
  );
}